import os
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler

def run_dummy_server():
    port = int(os.environ.get("PORT", 5000))
    server = HTTPServer(("0.0.0.0", port), SimpleHTTPRequestHandler)
    server.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_dummy_server, daemon=True).start()

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import re
from datetime import datetime

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7642974557:AAFQCBKKQFf6rTwz4aAe0v9l5cmccZyIvSo'
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = '385474644'
# ID –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
CONSULTANT_ID = '385474644'

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    CHOOSING_REGISTRATION_TYPE,
    FULLNAME,
    BIRTHDATE,
    ADDRESS,
    PHONE,
    EMAIL,
    SOURCE,
    INN,
) = range(8)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")],
        [KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_registration_type_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å")],
        [KeyboardButton("–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_back_keyboard():
    keyboard = [
        [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.message.from_user.first_name}!\n\n"
        "üõç –° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ö–ª—É–±–Ω–æ–º –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ú–∞–≥–∞–∑–∏–Ω–µ –ê—Ç–æ–º–∏ "
        "–∏ –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∞–π—Ç–µ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ 15%\n\n"
        "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "‚úÖ –ê–∫—Ü–∏–∏ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n"
        "‚úÖ –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫\n"
        "‚úÖ –ù–µ –Ω–∞–¥–æ –ø–æ–∫—É–ø–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä\n\n"
        "–°–ø–ª–æ—à–Ω—ã–µ –ø–ª—é—Å—ã!"
    )
    await update.message.reply_text(welcome_text, reply_markup=get_start_keyboard())
    return ConversationHandler.END

async def consultation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await context.bot.send_message(
        chat_id=CONSULTANT_ID,
        text=f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç @{update.message.from_user.username}"
    )
    return ConversationHandler.END

async def register_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=get_registration_type_keyboard()
    )
    return CHOOSING_REGISTRATION_TYPE

async def registration_type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    context.user_data['is_distributor'] = text == "–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä"
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=get_back_keyboard()
    )
    return FULLNAME

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def check_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        await cancel(update, context)
        return True
    return False

async def fullname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    context.user_data['fullname'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY):",
        reply_markup=get_back_keyboard()
    )
    return BIRTHDATE

async def birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    try:
        datetime.strptime(update.message.text, '%d.%m.%Y')
        context.user_data['birthdate'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:",
            reply_markup=get_back_keyboard()
        )
        return ADDRESS
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY",
            reply_markup=get_back_keyboard()
        )
        return BIRTHDATE
      

async def address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    context.user_data['address'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_back_keyboard()
    )
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    if not update.message.text.isdigit():
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã",
            reply_markup=get_back_keyboard()
        )
        return PHONE
    context.user_data['phone'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=get_back_keyboard()
    )
    return EMAIL

async def email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    if not re.match(r"[^@]+@[^@]+\.[^@]+", update.message.text):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=get_back_keyboard()
        )
        return EMAIL
    context.user_data['email'] = update.message.text
    await update.message.reply_text(
        "–û—Ç–∫—É–¥–∞ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?",
        reply_markup=get_back_keyboard()
    )
    return SOURCE

async def source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    context.user_data['source'] = update.message.text
    if context.user_data.get('is_distributor', False):
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:",
            reply_markup=get_back_keyboard()
        )
        return INN
    else:
        return await finish_registration(update, context)

async def inn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    if not update.message.text.isdigit():
        await update.message.reply_text(
            "–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã",
            reply_markup=get_back_keyboard()
        )
        return INN
    context.user_data['inn'] = update.message.text
    return await finish_registration(update, context)

async def finish_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    user = update.message.from_user
    
    admin_message = (
        f"üìù –ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø!\n\n"
        f"üë§ Telegram: @{user.username if user.username else '–ù–µ—Ç username'}\n"
        f"üìã –¢–∏–ø: {'–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä' if user_data['is_distributor'] else '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'}\n"
        f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üë§ –§–ò–û: {user_data['fullname']}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birthdate']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {user_data['address']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üìß Email: {user_data['email']}\n"
        f"üí° –ò—Å—Ç–æ—á–Ω–∏–∫: {user_data['source']}"
    )
    
    if user_data.get('is_distributor', False):
        admin_message += f"\nüî¢ –ò–ù–ù: {user_data['inn']}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    admin_message += f"\n\n‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {current_time}"
    
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_message,
        parse_mode='HTML'
    )
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        reply_markup=get_start_keyboard()
    )
    
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_start_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END
  

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    
    application.add_handler(MessageHandler(
        filters.Regex(pattern=r'^–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é$'),
        consultation
    ))
    
    registration_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(pattern=r'^–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$'), register_choice)],
        states={
            CHOOSING_REGISTRATION_TYPE: [
                MessageHandler(filters.Regex(pattern=r'^(–ü–æ–∫—É–ø–∞—Ç–µ–ª—å|–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä)$'), registration_type_chosen)
            ],
            FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fullname)],
            BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birthdate)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email)],
            SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, source)],
            INN: [MessageHandler(filters.TEXT & ~filters.COMMAND, inn)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex(pattern=r'^–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é$'), cancel)
        ],
    )
    
    application.add_handler(registration_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
