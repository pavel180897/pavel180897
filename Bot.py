from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram.error import NetworkError, TelegramError, TimedOut, RetryAfter
import re
from datetime import datetime
import logging
import asyncio
import json
import os
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler
from functools import wraps
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7642974557:AAFQCBKKQFf6rTwz4aAe0v9l5cmccZyIvSo'
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = '385474644'
# ID –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
CONSULTANT_ID = '385474644'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
MAX_RETRIES = 3
RETRY_DELAY = 2
CONVERSATION_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    CHOOSING_REGISTRATION_TYPE,
    FULLNAME,
    BIRTHDATE,
    ADDRESS,
    PHONE,
    EMAIL,
    SOURCE,
    INN,
) = range(8)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")],
        [KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_registration_type_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å")],
        [KeyboardButton("–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_back_keyboard():
    keyboard = [
        [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
def save_state(user_id, state_data):
    try:
        os.makedirs('states', exist_ok=True)
        with open(f'states/{user_id}.json', 'w') as f:
            json.dump(state_data, f)
    except Exception as e:
        logger.error(f"Error saving state: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
def load_state(user_id):
    try:
        with open(f'states/{user_id}.json', 'r') as f:
            return json.load(f)
    except:
        return None

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
def retry_on_error(max_retries=MAX_RETRIES, delay=RETRY_DELAY):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            for i in range(max_retries):
                try:
                    return await func(*args, **kwargs)
                except (NetworkError, TimedOut) as e:
                    if i == max_retries - 1:
                        logger.error(f"Failed after {max_retries} retries: {e}")
                        raise
                    logger.warning(f"Retry {i + 1}/{max_retries} after error: {e}")
                    await asyncio.sleep(delay * (i + 1))
                except RetryAfter as e:
                    await asyncio.sleep(e.retry_after)
                except Exception as e:
                    logger.error(f"Unexpected error: {e}")
                    raise
            return await func(*args, **kwargs)
        return wrapper
    return decorator

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
async def health_check(context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        await context.bot.get_me()
        logger.info("Health check passed")
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùóÔ∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–æ—Ç–æ–º: {e}"
            )
        except:
            pass

# –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è render.com
def run_dummy_server():
    try:
        port = int(os.environ.get("PORT", 5000))
        server = HTTPServer(("0.0.0.0", port), SimpleHTTPRequestHandler)
        logger.info(f"Starting HTTP server on port {port}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"Error starting HTTP server: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_dummy_server, daemon=True).start()

@retry_on_error()
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_id = str(update.effective_user.id)
    saved_state = load_state(user_id)
    if saved_state:
        context.user_data.update(saved_state)
    
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {update.message.from_user.first_name}!\n\n"
        "üõç –° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ö–ª—É–±–Ω–æ–º –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ú–∞–≥–∞–∑–∏–Ω–µ –ê—Ç–æ–º–∏ "
        "–∏ –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∞–π—Ç–µ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ 15%\n\n"
        "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "‚úÖ –ê–∫—Ü–∏–∏ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n"
        "‚úÖ –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫\n"
        "‚úÖ –ù–µ –Ω–∞–¥–æ –ø–æ–∫—É–ø–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä\n\n"
        "–°–ø–ª–æ—à–Ω—ã–µ –ø–ª—é—Å—ã!"
    )
    await update.message.reply_text(welcome_text, reply_markup=get_start_keyboard())
    return ConversationHandler.END

@retry_on_error()
async def consultation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await context.bot.send_message(
        chat_id=CONSULTANT_ID,
        text=f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç @{update.message.from_user.username}"
    )
    return ConversationHandler.END

@retry_on_error()
async def register_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=get_registration_type_keyboard()
    )
    return CHOOSING_REGISTRATION_TYPE

@retry_on_error()
async def registration_type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    context.user_data['is_distributor'] = text == "–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä"
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=get_back_keyboard()
    )
    return FULLNAME

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@retry_on_error()
async def check_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        await cancel(update, context)
        return True
    return False

@retry_on_error()
async def fullname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    context.user_data['fullname'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY):",
        reply_markup=get_back_keyboard()
    )
    return BIRTHDATE

@retry_on_error()
async def birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    try:
        datetime.strptime(update.message.text, '%d.%m.%Y')
        context.user_data['birthdate'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:",
            reply_markup=get_back_keyboard()
        )
        return ADDRESS
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY",
            reply_markup=get_back_keyboard()
        )
        return BIRTHDATE

@retry_on_error()
async def address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    context.user_data['address'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_back_keyboard()
    )
    return PHONE

@retry_on_error()
async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    if not update.message.text.isdigit():
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã",
            reply_markup=get_back_keyboard()
        )
        return PHONE
    context.user_data['phone'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=get_back_keyboard()
    )
    return EMAIL

@retry_on_error()
async def email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    if not re.match(r"[^@]+@[^@]+\.[^@]+", update.message.text):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=get_back_keyboard()
        )
        return EMAIL
    context.user_data['email'] = update.message.text
    await update.message.reply_text(
        "–û—Ç–∫—É–¥–∞ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?",
        reply_markup=get_back_keyboard()
    )
    return SOURCE

@retry_on_error()
async def source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    context.user_data['source'] = update.message.text
    if context.user_data.get('is_distributor', False):
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù:",
            reply_markup=get_back_keyboard()
        )
        return INN
    else:
        return await finish_registration(update, context)

@retry_on_error()
async def inn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_cancel(update, context):
        return ConversationHandler.END
    if not update.message.text.isdigit():
        await update.message.reply_text(
            "–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã",
            reply_markup=get_back_keyboard()
        )
        return INN
    context.user_data['inn'] = update.message.text
    return await finish_registration(update, context)

@retry_on_error()
async def finish_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    user = update.message.from_user
    
    admin_message = (
        f"üìù –ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø!\n\n"
        f"üë§ Telegram: @{user.username if user.username else '–ù–µ—Ç username'}\n"
        f"üìã –¢–∏–ø: {'–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä' if user_data['is_distributor'] else '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'}\n"
        f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üë§ –§–ò–û: {user_data['fullname']}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birthdate']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {user_data['address']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üìß Email: {user_data['email']}\n"
        f"üí° –ò—Å—Ç–æ—á–Ω–∏–∫: {user_data['source']}"
    )
    
    if user_data.get('is_distributor', False):
        admin_message += f"\nüî¢ –ò–ù–ù: {user_data['inn']}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    admin_message += f"\n\n‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {current_time}"
    
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_message,
        parse_mode='HTML'
    )
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        reply_markup=get_start_keyboard()
    )
    
    context.user_data.clear()
    return ConversationHandler.END

@retry_on_error()
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_start_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .get_updates_read_timeout(30)
            .get_updates_write_timeout(30)
            .get_updates_connection_pool_size(100)
            .build()
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        try:
            application.job_queue.run_repeating(health_check, interval=300)
        except Exception as e:
            logger.warning(f"Could not setup health check: {e}")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', start),
                MessageHandler(filters.Regex('^–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é$'), consultation),
                MessageHandler(filters.Regex('^–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$'), register_choice),
            ],
            states={
                CHOOSING_REGISTRATION_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, registration_type_chosen)],
                FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fullname)],
                BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birthdate)],
                ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
                EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email)],
                SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, source)],
                INN: [MessageHandler(filters.TEXT & ~filters.COMMAND, inn)],
            },
            fallbacks=[MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é$'), cancel)],
            conversation_timeout=CONVERSATION_TIMEOUT
        )

        application.add_handler(conv_handler)

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await application.initialize()
            await application.start()
            logger.info("Bot started successfully")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
            while True:
                try:
                    await application.run_polling(
                        allowed_updates=Update.ALL_TYPES,
                        drop_pending_updates=True
                    )
                except NetworkError as e:
                    logger.error(f"Network error occurred: {e}")
                    await asyncio.sleep(1)
                except TimedOut as e:
                    logger.error(f"Timeout error occurred: {e}")
                    await asyncio.sleep(2)
                except RetryAfter as e:
                    logger.error(f"Rate limit error occurred: {e}")
                    await asyncio.sleep(e.retry_after)
                except TelegramError as e:
                    logger.error(f"Telegram error occurred: {e}")
                    await asyncio.sleep(5)
                except Exception as e:
                    logger.error(f"Unexpected error occurred: {e}")
                    await asyncio.sleep(10)
        except Exception as e:
            logger.error(f"Fatal error occurred: {e}")
        finally:
            try:
                await application.stop()
            except Exception as e:
                logger.error(f"Error stopping application: {e}")

    except Exception as e:
        logger.error(f"Fatal error occurred: {e}")

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π event loop"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error in main loop: {e}")

if __name__ == '__main__':
    run_bot()
